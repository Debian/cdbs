# -*- mode: makefile; coding: utf-8 -*-
# Copyright © 2003 Colin Walters <walters@debian.org>
# Copyright © 2006 Marc Dequènes (Duck) <Duck@DuckCorp.org>
# Copyright © 2003,2006-2011 Jonas Smedegaard <dr@jones.dk>
# Description: Common variables for Python packages
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#PATH_RULES#

ifndef _cdbs_class_python_vars
_cdbs_class_python_vars = 1

include $(_cdbs_rules_path)/buildvars.mk$(_cdbs_makefile_suffix)
include $(_cdbs_class_path)/langcore.mk$(_cdbs_makefile_suffix)

# By default per-implementation packaging systems are used.
# Set explicitly to use legacy alternative "pysupport" or "pycentral".
#DEB_PYTHON_SYSTEM =

# Per-implementation systems use all likely packages by default.
# These are tied together: Set one, and default is none for the others.
# NB! override needs to be done _before_ including this file!
#DEB_PYTHON2_MODULE_PACKAGES =
#DEB_PYTHON3_MODULE_PACKAGES =

# Legacy systems "pysupport" and "pycentral" use first likely package in
# debian/control by default.
# NB! override needs to be done _before_ including this file!
#DEB_PYTHON_MODULE_PACKAGES =

#DEB_PYTHON_PRIVATE_MODULES_DIRS =

#DEB_PYTHON_SRCDIR = $(DEB_DESTDIR)
#DEB_PYTHON_DESTDIR = $(DEB_DESTDIR)

# implementations of Python itself
_CDBS_PYTHONS = python2 python3
#  * uppercase implementation names
$(foreach p,$(_CDBS_PYTHONS),$(eval _cdbs_$p_uc := $(call cdbs_uc,$p)))

# binary packages
# default package prefix (if different from implementation name)
# (i.e. if not overridden by DEB_*_MODULE_PACKAGES)
_cdbs_python2_pkgprefix = python

# flavors of each implementation
# resolve all/default flavor (if differing from implementation name)
_cdbs_expand_python2_allflavors = $(shell pyversions -r)
_cdbs_expand_python3_allflavors = $(shell py3versions -r)
_cdbs_expand_python2_defaultflavor = $(shell pyversions -d)
_cdbs_expand_python3_defaultflavor = $(shell py3versions -d)

# binary packages in use
cdbs_python_potential_packages = $(strip \
	$(filter-out %-doc %-dev %-common,$(DEB_PACKAGES)))
cdbs_python_legacy_packages = $(or $(strip \
	$(DEB_PYTHON_MODULE_PACKAGES)),$(strip \
	$(firstword $(cdbs_python_potential_packages))))
# per-python package lists
#  * variables _cdbs_$python_packages:
#    1. any DEB_*_MODULE_PACKAGES is non-empty: DEB_$P_MODULE_PACKAGES
#    2. $p-* (or $pkgprefix-*) in control file except *-doc *-dev *-common
$(foreach p,$(_CDBS_PYTHONS),$(eval _cdbs_$p_packages = $(strip \
	$(if $(strip \
		$(foreach P,$(_CDBS_PYTHONS),\
			$(DEB_$(_cdbs_$P_uc)_MODULE_PACKAGES))),\
		$(DEB_$(_cdbs_$p_uc)_MODULE_PACKAGES),\
		$(filter $(or $(_cdbs_$p_pkgprefix),$p)-%,\
			$(cdbs_python_potential_packages))))))
cdbs_python_packages = $(strip \
	$(if $(DEB_PYTHON_SYSTEM),\
		$(cdbs_python_legacy_packages),\
		$(foreach p,$(_CDBS_PYTHONS),$(space)$(_cdbs_$p_packages))))
$(foreach p,$(_CDBS_PYTHONS),$(eval _cdbs_$p_arch_packages = $(strip \
	$(filter $(_cdbs_$p_packages),$(DEB_ARCH_PACKAGES)))))
cdbs_python_arch_packages = $(strip \
	$(filter $(cdbs_python_packages),$(DEB_ARCH_PACKAGES)))
$(foreach p,$(_CDBS_PYTHONS),$(eval _cdbs_$p_indep_packages = $(strip \
	$(filter $(_cdbs_$p_packages),$(DEB_INDEP_PACKAGES)))))
cdbs_python_indep_packages = $(strip \
	$(filter $(cdbs_python_packages),$(DEB_INDEP_PACKAGES)))

cdbs_python_destdir = $(or $(DEB_PYTHON_DESTDIR),$(DEB_DESTDIR))

# packaging systems to use
cdbs_pythonsystem_pysupport = $(filter pysupport,$(DEB_PYTHON_SYSTEM))
cdbs_pythonsystem_pycentral = $(filter pycentral,$(DEB_PYTHON_SYSTEM))
cdbs_python_legacy_system = $(or $(strip \
	$(cdbs_pythonsystem_pysupport)),$(strip \
	$(cdbs_pythonsystem_pycentral)),\
	$(error unsupported Python system: $(DEB_PYTHON_SYSTEM) \
		(select either pysupport or pycentral, or leave empty \
		for default $(subst $(space),/,$(strip $(_CDBS_PYTHONS)))))))
cdbs_pythonsystem_python2 = $(strip \
	$(if $(DEB_PYTHON_SYSTEM),\
		,\
		$(if $(_cdbs_python2_packages),\
			python2)))
cdbs_pythonsystem_python3 = $(strip \
	$(if $(DEB_PYTHON_SYSTEM),\
		,\
		$(if $(_cdbs_python3_packages),\
			python3)))
cdbs_python_systems = $(strip \
	$(if $(DEB_PYTHON_SYSTEM),\
		$(cdbs_python_legacy_system),\
		$(foreach p,$(_CDBS_PYTHONS),\
			$(if $(_cdbs_$p_packages),\
				$p))))
# some build systems can handle only a single packaging system
_cdbs_python_singlesystem = $(strip \
	$(cdbs_python_systems) \
	$(if $(word 2,$(cdbs_python_systems)),$(error \
	use of multiple python implementations is unsupported here - \
	either change target binary package names, or explicitly set \
	or suppress the binary packages to operate on using either \
	DEB_PYTHON3_PACKAGES or another DEB_*_PACKAGES variable)))

# all/default flavors to use
# variables _cdbs_$p_allflavors _cdbs_$p_defaultflavor
#  1. resolved from _cdbs_expand_$p_*
#  2. name of python implementation
$(foreach p,$(_CDBS_PYTHONS),$(if $(cdbs_$p_packages),\
	$(foreach v,allflavors defaultflavor,\
		$(eval _cdbs_$p_$v := $(or $(call _cdbs_expand_$p_$v),$p)))))

# flavors to use
# variables _cdbs_$python_altflavor
#  * arch-indep w/ default unsupported: first alternative available
$(foreach p,$(_CDBS_PYTHONS),$(eval _cdbs_$p_altflavor = $(strip \
	$(if $(cdbs_python_arch_packages),\
		,\
		$(if $(filter $(_cdbs_$p_defaultflavor),$(_cdbs_$p_allflavors)),\
			,\
			$(firstword $(strip $(sort $(_cdbs_$p_allflavors)))))))))
# variables cdbs_$python_mainflavor
$(foreach p,$(_CDBS_PYTHONS),$(eval cdbs_$p_mainflavor = $(or $(strip \
	$(_cdbs_$p_altflavor)),$(strip \
	$(_cdbs_$p_defaultflavor)))))
# variables _cdbs_$python_flavors
#  * arch(+indep): all; indep: current if supported, else first supported
$(foreach p,$(_CDBS_PYTHONS),$(eval _cdbs_$p_flavors = $(or $(strip \
	$(if $(cdbs_python_arch_packages),\
		$(_cdbs_$p_allflavors))),$(strip \
	$(cdbs_$p_mainflavor)))))
cdbs_python_flavors = $(strip \
	$(foreach p,$(_CDBS_PYTHONS),\
		$(_cdbs_$p_flavors)))

# runtime to use
# resolve from binary package and optional flavor
cdbs_python_binary = $(strip \
	$(if $(call cdbs_streq,$(cdbs_$(cdbs_curpython)_defaultflavor),$1),\
		$(cdbs_curpython),\
		$1))

# resolve (implicitly) from binary package
cdbs_curpythonsystems = $(strip $(if $(DEB_PYTHON_SYSTEM),\
	$(cdbs_python_legacy_system),\
	$(strip \
		$(if $(filter $(cdbs_curpkg),$(_cdbs_python2_packages)),\
			python2) \
		$(if $(filter $(cdbs_curpkg),$(_cdbs_python3_packages)),\
			python3))))
cdbs_curpython = $(strip \
	$(if $(cdbs_python_single_system),\
		$(_cdbs_python_singlesystem),\
		$(foreach p,$(_CDBS_PYTHONS),\
			$(if $(filter $(cdbs_curpkg),$(_cdbs_$p_packages)),\
				$p))))
cdbs_curpythonindepbinary = $(or $(strip \
	$(_cdbs_$(cdbs_curpython)_altflavor)),$(strip \
	$(cdbs_curpython)))
cdbs_curpythonpribinary = $(cdbs_$(cdbs_curpython)_mainflavor)
cdbs_curpythonflavors = $(_cdbs_$(cdbs_curpython)_flavors)

# package relations
# Python-related dependencies according to Python policy, appendix A
#  * Arch-independent Python 3 was broken until 0.4.93~
cdbs_python_builddeps_legacy = $(if $(DEB_PYTHON_SYSTEM),\
	$(if $(cdbs_python_arch_packages),\
		python-all-dev,\
		python-dev (>= 2.3.5-7)\
			$(cdbs_python_nondefault_version:%=, python%-dev)))
cdbs_python_builddeps_python2 = $(if $(cdbs_pythonsystem_python2),\
	$(if $(_cdbs_python2_arch_packages),\
		python-all-dev,\
		python-dev (>= 2.3.5-7)\
			$(_cdbs_python2_altflavor:%=, %-dev)))
cdbs_python3_builddeps = $(if $(cdbs_pythonsystem_python3),\
	$(if $(_cdbs_python3_arch_packages),\
		python3-all-dev (>= 3.1),\
		python3-dev\
			$(_cdbs_python3_altflavor:%=, %-dev)))
cdbs_python_builddeps = \
	$(cdbs_python_builddeps_legacy), \
	$(cdbs_python_builddeps_python2), \
	$(cdbs_python3_builddeps)
cdbs_python_builddeps_cdbs = $(strip \
	$(if $(_cdbs_python3_indep_packages),\
		$(comma) cdbs (>= 0.4.93~),\
		$(if $(cdbs_pythonsystem_python2)$(cdbs_pythonsystem_python3),\
			$(comma) cdbs (>= 0.4.90~))))

# check if build is possible
$(if $(cdbs_pythonsystem_pysupport),\
	$(if $(_cdbs_python2_flavors),\
		,\
		$(error invalid setting in debian/pyversions)))
$(if $(cdbs_pythonsystem_pycentral),\
	$(if $(_cdbs_python2_flavors),\
		,\
		$(error invalid setting for XS-Python-Version)))
$(if $(cdbs_pythonsystem_python2),\
	$(if $(_cdbs_python2_flavors),\
		,\
		$(error invalid setting for X-Python-Version)))
$(if $(cdbs_pythonsystem_python3),\
	$(if $(_cdbs_python3_flavors),\
		,\
		$(error invalid setting for X-Python3-Version)))

# deprecated variables
cdbs_python_selected_pyversions = $(strip $(call cdbs_warn_deprecated,\
	cdbs_python_selected_pyversions,0.4.90)\
	$(if $(DEB_PYTHON_SYSTEM),\
		$(shell if [ -e debian/pyversions ]; then \
			cat debian/pyversions; \
		fi)))
cdbs_curpythonstem = $(strip $(call cdbs_warn_deprecated,\
	cdbs_curpythonstem,0.5,cdbs_curpython)\
	$(filter 3,$(cdbs_curpython:python%=%)))
cdbs_python_current_binary = $(strip $(call cdbs_warn_deprecated,\
	cdbs_python_current_binary,0.5)\
	$(_cdbs_python2_defaultflavor))
cdbs_python3_current_binary = $(strip $(call cdbs_warn_deprecated,\
	cdbs_python3_current_binary,0.5)\
	$(_cdbs_python3_defaultflavor))
cdbs_python_current_version = $(strip $(call cdbs_warn_deprecated,\
	cdbs_python_current_version,0.5)\
	$(_cdbs_python2_defaultflavor:python%=%))
cdbs_python3_current_version = $(strip $(call cdbs_warn_deprecated,\
	cdbs_python3_current_version,0.5)\
	$(_cdbs_python3_defaultflavor:python%=%))
cdbs_python_supported_versions = $(strip $(call cdbs_warn_deprecated,\
	cdbs_python_supported_versions,0.5)\
	$(_cdbs_python2_allflavors:python%=%))
cdbs_python3_supported_versions = $(strip $(call cdbs_warn_deprecated,\
	cdbs_python3_supported_versions,0.5)\
	$(_cdbs_python3_allflavors:python%=%))
cdbs_python_build_versions = $(strip $(call cdbs_warn_deprecated,\
	cdbs_python_build_versions,0.5,cdbs_python_flavors)\
	$(_cdbs_python2_flavors))

endif
