# -*- mode: makefile; coding: utf-8 -*-
# Copyright © 2003 Colin Walters <walters@debian.org>
# Copyright © 2006 Marc Dequènes (Duck) <Duck@DuckCorp.org>
# Copyright © 2003,2006-2011 Jonas Smedegaard <dr@jones.dk>
# Description: Common variables for Python packages
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#PATH_RULES#

ifndef _cdbs_class_python_vars
_cdbs_class_python_vars = 1

include $(_cdbs_rules_path)/buildvars.mk$(_cdbs_makefile_suffix)
include $(_cdbs_class_path)/langcore.mk$(_cdbs_makefile_suffix)

# By default per-implementation packaging systems are used.
# Set explicitly to use legacy alternative "pysupport" or "pycentral".
#DEB_PYTHON_SYSTEM =

# Per-implementation systems use all likely packages by default.
# These are tied together: Set one, and default is none for the others.
# NB! override needs to be done _before_ including this file!
#DEB_PYTHON2_MODULE_PACKAGES =
#DEB_PYTHON3_MODULE_PACKAGES =

# Legacy systems "pysupport" and "pycentral" use first likely package in
# debian/control by default.
# NB! override needs to be done _before_ including this file!
#DEB_PYTHON_MODULE_PACKAGES =

#DEB_PYTHON_PRIVATE_MODULES_DIRS =

#DEB_PYTHON_SRCDIR = $(DEB_DESTDIR)
#DEB_PYTHON_DESTDIR = $(DEB_DESTDIR)

# binary packages
cdbs_python_potential_packages = $(strip \
	$(filter-out %-doc %-dev %-common,$(DEB_PACKAGES)))
cdbs_python_legacy_packages = $(or $(strip \
	$(DEB_PYTHON_MODULE_PACKAGES)),$(strip \
	$(firstword $(cdbs_python_potential_packages))))
# per-python package lists
#  * variables cdbs_$python_packages:
#    1. any DEB_*_MODULE_PACKAGES is non-empty: DEB_$P_MODULE_PACKAGES
#    2. $p-* (or $pkgprefix-*) in control file except *-doc *-dev *-common
cdbs_python2_packages = $(strip \
	$(if $(DEB_PYTHON2_MODULE_PACKAGES)$(DEB_PYTHON3_MODULE_PACKAGES),\
		$(DEB_PYTHON2_MODULE_PACKAGES),\
		$(filter python-%,$(cdbs_python_potential_packages))))
cdbs_python3_packages = $(strip \
	$(if $(DEB_PYTHON2_MODULE_PACKAGES)$(DEB_PYTHON3_MODULE_PACKAGES),\
		$(DEB_PYTHON3_MODULE_PACKAGES),\
		$(filter python3-%,$(cdbs_python_potential_packages))))
cdbs_python_packages = $(strip \
	$(if $(DEB_PYTHON_SYSTEM),\
		$(cdbs_python_legacy_packages),\
		$(cdbs_python2_packages) $(cdbs_python3_packages)))
cdbs_python2_arch_packages = $(strip \
	$(filter $(cdbs_python2_packages),$(DEB_ARCH_PACKAGES)))
cdbs_python3_arch_packages = $(strip \
	$(filter $(cdbs_python3_packages),$(DEB_ARCH_PACKAGES)))
cdbs_python_arch_packages = $(strip \
	$(filter $(cdbs_python_packages),$(DEB_ARCH_PACKAGES)))
cdbs_python2_indep_packages = $(strip \
	$(filter $(cdbs_python2_packages),$(DEB_INDEP_PACKAGES)))
cdbs_python3_indep_packages = $(strip \
	$(filter $(cdbs_python3_packages),$(DEB_INDEP_PACKAGES)))
cdbs_python_indep_packages = $(strip \
	$(filter $(cdbs_python_packages),$(DEB_INDEP_PACKAGES)))

cdbs_python_destdir = $(or $(DEB_PYTHON_DESTDIR),$(DEB_DESTDIR))

# packaging systems to use
cdbs_pythonsystem_pysupport = $(filter pysupport,$(DEB_PYTHON_SYSTEM))
cdbs_pythonsystem_pycentral = $(filter pycentral,$(DEB_PYTHON_SYSTEM))
cdbs_python_legacy_system = $(or $(strip \
	$(cdbs_pythonsystem_pysupport)),$(strip \
	$(cdbs_pythonsystem_pycentral)),\
	$(error unsupported Python system: $(DEB_PYTHON_SYSTEM) \
		(select either pysupport or pycentral, or leave empty \
		for default python2/python3))))
cdbs_pythonsystem_python2 = $(strip \
	$(if $(DEB_PYTHON_SYSTEM),\
		,\
		$(if $(cdbs_python2_packages),\
			python2)))
cdbs_python3 = $(strip \
	$(if $(DEB_PYTHON_SYSTEM),\
		,\
		$(if $(cdbs_python3_packages),\
			python3)))
cdbs_python_systems = $(strip \
	$(if $(DEB_PYTHON_SYSTEM),\
		$(cdbs_python_legacy_system),\
		$(if $(cdbs_python2_packages),\
			python2) \
		$(if $(cdbs_python3_packages),\
			python3)))
cdbs_python_stem = $(if $(DEB_PYTHON_SYSTEM),,$(if $(cdbs_python3_packages),3))
# some build systems can handle only a single packaging system
cdbs_python_stem += $(strip \
	$(if $(word 2,$(cdbs_python_systems)),$(error \
	use of multiple python implementations is unsupported here - \
	either change target binary package names, or explicitly set \
	or suppress the binary packages to operate on using either \
	DEB_PYTHON3_PACKAGES or another DEB_*_PACKAGES variable)))

# Calculate cdbs_python_build_versions
cdbs_python_current_version := $(if $(DEB_PYTHON_SYSTEM)$(cdbs_pythonsystem_python2),$(shell pyversions -vd))
cdbs_python3_current_version := $(if $(cdbs_python3),$(shell py3versions -vd))
cdbs_python_supported_versions := $(if $(DEB_PYTHON_SYSTEM)$(cdbs_pythonsystem_python2),$(shell pyversions -vr))
cdbs_python3_supported_versions := $(if $(cdbs_python3),$(shell py3versions -vr))
cdbs_python_first_supported_version = $(firstword $(strip $(sort $(cdbs_python_supported_versions))))
cdbs_python3_first_supported_version = $(firstword $(strip $(sort $(cdbs_python3_supported_versions))))

# versions to use
# variables cdbs_$python_nondefault_version
#  * arch-indep w/ default unsupported: first alternative available
cdbs_python_nondefault_version = $(strip \
	$(if $(cdbs_python_arch_packages),\
		,\
		$(if $(filter $(cdbs_python_current_version),$(cdbs_python_supported_versions)),\
			,\
			$(cdbs_python_first_supported_version))))
cdbs_python3_nondefault_version = $(strip \
	$(if $(cdbs_python_arch_packages),\
		,\
		$(if $(filter $(cdbs_python3_current_version),$(cdbs_python3_supported_versions)),\
			,\
			$(cdbs_python3_first_supported_version))))
# variables cdbs_$python_primary_version
cdbs_python_primary_version = $(or $(strip \
	$(cdbs_python_nondefault_version)),$(strip \
	$(cdbs_python_current_version)))
cdbs_python3_primary_version = $(or $(strip \
	$(cdbs_python3_nondefault_version)),$(strip \
	$(cdbs_python3_current_version)))
# variables cdbs_$python_build_versions
#  * arch(+indep): all; indep: current if supported, else first supported
cdbs_python_build_versions = $(or $(strip \
	$(if $(cdbs_python_arch_packages),\
		$(cdbs_python_supported_versions))),$(strip \
	$(cdbs_python_primary_version)))
cdbs_python3_build_versions = $(or $(strip \
	$(if $(cdbs_python_arch_packages),\
		$(cdbs_python3_supported_versions))),$(strip \
	$(cdbs_python3_primary_version)))

# runtime to use
cdbs_python_current_binary := $(if $(DEB_PYTHON_SYSTEM)$(cdbs_pythonsystem_python2),$(shell pyversions -d))
cdbs_python3_current_binary := $(if $(cdbs_python3),$(shell py3versions -d))
# resolve from binary package and optional flavor
cdbs_python_binary = $(strip \
	$(if $(call cdbs_streq,$(cdbs_python$(cdbs_curpythonstem)_current_binary),$(1)),\
		python$(cdbs_curpythonstem),\
		$(1)))

# resolve (implicitly) from binary package
cdbs_curpythonsystems = $(strip $(if $(DEB_PYTHON_SYSTEM),\
	$(cdbs_python_legacy_system),\
	$(strip \
		$(if $(filter $(cdbs_curpkg),$(cdbs_python2_packages)),\
			python2) \
		$(if $(filter $(cdbs_curpkg),$(cdbs_python3_packages)),\
			python3))))
cdbs_curpythonstem = $(strip \
	$(if $(cdbs_python_single_system),\
		$(cdbs_python_stem),\
		$(if $(filter $(cdbs_curpkg),$(cdbs_python3_packages)),\
			3)))
cdbs_curpythonindepbinary = python$(or $(strip \
	$(cdbs_python$(cdbs_curpythonstem)_nondefault_version)),$(strip \
	$(cdbs_curpythonstem)))
cdbs_curpythonpribinary = python$(cdbs_python$(cdbs_curpythonstem)_primary_version)
cdbs_curpythonbuildversions = $(cdbs_python$(cdbs_curpythonstem)_build_versions)

# package relations
# Python-related dependencies according to Python policy, appendix A
#  * Arch-independent Python 3 was broken until 0.4.93~
cdbs_python_builddeps_legacy = $(if $(DEB_PYTHON_SYSTEM),\
	$(if $(cdbs_python_arch_packages),\
		python-all-dev,\
		python-dev (>= 2.3.5-7)\
			$(cdbs_python_nondefault_version:%=, python%-dev)))
cdbs_python2_builddeps = $(if $(cdbs_pythonsystem_python2),\
	$(if $(cdbs_python2_arch_packages),\
		python-all-dev,\
		python-dev (>= 2.3.5-7)\
			$(cdbs_python_nondefault_version:%=, python%-dev)))
cdbs_python3_builddeps = $(if $(cdbs_python3),\
	$(if $(cdbs_python3_arch_packages),\
		python3-all-dev (>= 3.1),\
		python3-dev\
			$(cdbs_python3_nondefault_version:%=, python%-dev)))
cdbs_python_builddeps = \
	$(cdbs_python_builddeps_legacy), \
	$(cdbs_python2_builddeps), \
	$(cdbs_python3_builddeps)
cdbs_python_builddeps_cdbs = $(strip \
	$(if $(cdbs_python3_indep_packages),\
		$(comma) cdbs (>= 0.4.93~),\
		$(if $(cdbs_pythonsystem_python2)$(cdbs_python3),\
			$(comma) cdbs (>= 0.4.90~))))

# check if build is possible
$(if $(cdbs_pythonsystem_pysupport),\
	$(if $(cdbs_python_build_versions),\
		,\
		$(error invalid setting in debian/pyversions)))
$(if $(cdbs_pythonsystem_pycentral),\
	$(if $(cdbs_python_build_versions),\
		,\
		$(error invalid setting for XS-Python-Version)))
$(if $(cdbs_pythonsystem_python2),\
	$(if $(cdbs_python_build_versions),\
		,\
		$(error invalid setting for X-Python-Version)))
$(if $(cdbs_python3),\
	$(if $(cdbs_python3_build_versions),\
		,\
		$(error invalid setting for X-Python3-Version)))

# deprecated variables
cdbs_python_selected_pyversions = $(strip $(call cdbs_warn_deprecated,\
	cdbs_python_selected_pyversions,0.4.90)\
	$(if $(DEB_PYTHON_SYSTEM),\
		$(shell if [ -e debian/pyversions ]; then \
			cat debian/pyversions; \
		fi)))

endif
