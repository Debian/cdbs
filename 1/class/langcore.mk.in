# -*- mode: makefile; coding: utf-8 -*-
# Copyright © 2002,2003 Colin Walters <walters@debian.org>
# Copyright © 2011 Jonas Smedegaard <dr@jones.dk>
# Description: Sets core language variables, such as CFLAGS and CXXFLAGS
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#PATH_RULES#

ifndef _cdbs_class_langcore
_cdbs_class_langcore = 1


# Resolve our defaults
# $(filter-out %x%,...) doesn't work ...
_filter_out = $(foreach v,$(2),$(if $(findstring $(1),$(v)),,$(v)))
# GNU Make doesn't export current environment in $(shell ..) function.
# We need at least some of the DEB_* flags for dpkg-buildflags, so
# extract them from the defined variables.  Sadly there seems to be no
# way to get just get all exported variables.
#
# Make variables containing the characters "+ - ." need to be filtered out as
# they can't be exported as shell variables, see #712729.
#
# massage dpkg-buildflag output:
#  * filter to include only lines matching expected format
#  * transform prefix, e.g. "export LDFLAGS := " -> "deb_ldflags := "
$(shell \
	$(call cdbs_set_nondefaultvars,\
			$(call _filter_out,+,\
			$(call _filter_out,-,\
			$(call _filter_out,.,\
			$(filter DEB_%,$(.VARIABLES)))))) \
	dpkg-buildflags --export=make \
	| perl -n \
	-E '/^export\s+([A-Z]+)(\s+:=\s+\S.+)$$/ and say "deb_", lc($$1), $$2' \
	> debian/_cdbs_buildflags.mk )
-include debian/_cdbs_buildflags.mk
$(shell rm -f debian/_cdbs_buildflags.mk)

DEB_WARNING_FLAGS ?= -Wall
deb_cflags += $(DEB_WARNING_FLAGS)
deb_cxxflags += $(DEB_WARNING_FLAGS)

# Set (not add) our defaults for CFLAGS CPPFLAGS CXXFLAGS and LDFLAGS if
# undefined or defined implicitly by make (i.e. if not set or set empty)
deb_cflags_nondefault := $(call cdbs_expand_nondefaultvar,CFLAGS,$(deb_cflags))
deb_cppflags_nondefault := $(call cdbs_expand_nondefaultvar,CPPFLAGS,$(deb_cppflags))
deb_cxxflags_nondefault := $(call cdbs_expand_nondefaultvar,CXXFLAGS,$(deb_cxxflags))
deb_fflags_nondefault := $(call cdbs_expand_nondefaultvar,FFLAGS,$(deb_fflags))
deb_ldflags_nondefault := $(call cdbs_expand_nondefaultvar,LDFLAGS,$(deb_ldflags))
CFLAGS ?= $(deb_cflags_nondefault)
CPPFLAGS ?= $(deb_cppflags_nondefault)
CXXFLAGS ?= $(deb_cxxflags_nondefault)
FFLAGS ?= $(deb_fflags_nondefault)
LDFLAGS ?= $(deb_ldflags_nondefault)

ifneq (,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
	DEB_PARALLEL_JOBS ?= $(patsubst parallel=%,%,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
endif

endif
