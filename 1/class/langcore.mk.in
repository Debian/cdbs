# -*- mode: makefile; coding: utf-8 -*-
# Copyright © 2002,2003 Colin Walters <walters@debian.org>
# Copyright © 2011 Jonas Smedegaard <dr@jones.dk>
# Description: Sets core language variables, such as CFLAGS and CXXFLAGS
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#PATH_RULES#

ifndef _cdbs_class_langcore
_cdbs_class_langcore = 1


# Resolve our defaults
ifneq (,$(wildcard /usr/bin/dpkg-buildflags))
# $(filter-out %x%,...) doesn't work ...
_filter_out = $(foreach v,$(2),$(if $(findstring $(1),$(v)),,$(v)))
# GNU Make doesn't export current environment in $(shell ..) function.
# We need at least some of the DEB_* flags for dpkg-buildflags, so
# extract them from the defined variables.  Sadly there seems to be no
# way to get just get all exported variables.
#
# Make variables containing the characters "+ - ." need to be filtered out as
# they can't be exported as shell variables, see #712729.
_get_dpkg_buildflags = $(shell \
	$(foreach flag,\
			$(call _filter_out,+,\
			$(call _filter_out,-,\
			$(call _filter_out,.,\
			$(filter DEB_%,$(.VARIABLES))))),\
		$(flag)="$($(flag))") \
	dpkg-buildflags --get $(1))
deb_cflags := $(call _get_dpkg_buildflags,CFLAGS)
deb_cppflags := $(call _get_dpkg_buildflags,CPPFLAGS)
deb_cxxflags := $(call _get_dpkg_buildflags,CXXFLAGS)
deb_fflags := $(call _get_dpkg_buildflags,FFLAGS)
deb_ldflags := $(call _get_dpkg_buildflags,LDFLAGS)
else
# TODO: Use above unconditionally when oldstable has dpkg >= 1.15.7
deb_cflags = -g
deb_cxxflags = -g
ifneq (,$(filter noopt,$(DEB_BUILD_OPTIONS)))
DEB_OPT_FLAG ?= -O0
else
DEB_OPT_FLAG ?= -O2
endif
deb_cflags += $(DEB_OPT_FLAG)
deb_cxxflags += $(DEB_OPT_FLAG)
endif

DEB_WARNING_FLAGS ?= -Wall
deb_cflags += $(DEB_WARNING_FLAGS)
deb_cxxflags += $(DEB_WARNING_FLAGS)

_cdbs_deprecated_vars += DEB_OPT_FLAG,0.4.89
_cdbs_deprecated_DEB_OPT_FLAG_default := $(DEB_OPT_FLAG)

# Set (not add) our defaults for CFLAGS CPPFLAGS CXXFLAGS and LDFLAGS if
# undefined or defined implicitly by make (i.e. if not set or set empty)
deb_cflags_nondefault := $(call cdbs_expand_nondefaultvar,CFLAGS,$(deb_cflags))
deb_cppflags_nondefault := $(call cdbs_expand_nondefaultvar,CPPFLAGS,$(deb_cppflags))
deb_cxxflags_nondefault := $(call cdbs_expand_nondefaultvar,CXXFLAGS,$(deb_cxxflags))
deb_fflags_nondefault := $(call cdbs_expand_nondefaultvar,FFLAGS,$(deb_fflags))
deb_ldflags_nondefault := $(call cdbs_expand_nondefaultvar,LDFLAGS,$(deb_ldflags))
CFLAGS ?= $(deb_cflags_nondefault)
CPPFLAGS ?= $(deb_cppflags_nondefault)
CXXFLAGS ?= $(deb_cxxflags_nondefault)
FFLAGS ?= $(deb_fflags_nondefault)
LDFLAGS ?= $(deb_ldflags_nondefault)

ifneq (,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
	DEB_PARALLEL_JOBS ?= $(patsubst parallel=%,%,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
endif

endif
