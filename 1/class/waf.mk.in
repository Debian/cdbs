# -*- mode: makefile; coding: utf-8 -*-
# Copyright © 2010 Rémi Thebault <remi.thebault@gmail.com>
# Description: A class to configure and build Waf based packages
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.



####
#
# Here is how to use this class in debian/rules:
#   include /usr/share/cdbs/1/rules/debhelper.mk
#   include /usr/share/cdbs/1/class/waf.mk
#
#
# General variables implemented by this class file:
#
# DEB_WAF_OPTIONS
#   Options that will be appended to every WAF call
#
# DEB_WAF_CONFIGURE_OPTIONS
#   Options that will be appended to the WAF configure target
#	TODO: update docbook
#
# DEB_WAF_ENV
#   Environment variables to be passed to every WAF invocation
#


#PATH_RULES#


ifndef _cdbs_class_waf
_cdbs_class_waf = 1

include $(_cdbs_rules_path)/buildcore.mk$(_cdbs_makefile_suffix)
include $(_cdbs_class_path)/langcore.mk$(_cdbs_makefile_suffix)


cdbs_waf_options = $(call cdbs_expand_curvar,DEB_WAF_OPTIONS)
cdbs_waf_configure_options = $(call cdbs_expand_curvar,DEB_WAF_CONFIGURE_OPTIONS)


DEB_WAF_PREFIX ?= /usr
DEB_WAF_PARALLEL ?= $(and $(DEB_BUILD_PARALLEL),$(DEB_PARALLEL_JOBS),--jobs $(DEB_PARALLEL_JOBS))
DEB_WAF_INVOKE ?= cd $(DEB_SRCDIR) && $(DEB_WAF_CONFIGURE_ENV) $(DEB_WAF_ENV) ./waf $(DEB_WAF_PARALLEL)
DEB_WAF_CONFIGURE_ENV ?= $(call cdbs_set_nondefaultvars,CC CXX) CFLAGS="$(CFLAGS)" CXXFLAGS="$(CXXFLAGS)" CPPFLAGS="$(CPPFLAGS)" LINKFLAGS="$(LDFLAGS)"
DEB_WAF_CONFIGURE_TARGET ?= configure
DEB_WAF_CLEAN_TARGET ?= distclean
DEB_WAF_BUILD_TARGET ?= build
DEB_WAF_INSTALL_TARGET ?= install


# ensure waf is executable
cdbs-waf-sanity-check:
	test -f $(DEB_BUILDDIR)/waf
	test -x $(DEB_BUILDDIR)/waf


common-configure-arch common-configure-indep:: common-configure-impl
common-configure-impl:: debian/stamp-waf-configure
debian/stamp-waf-configure: cdbs-waf-sanity-check
	$(DEB_WAF_INVOKE) $(DEB_WAF_CONFIGURE_TARGET) --prefix=$(DEB_WAF_PREFIX) $(cdbs_waf_options) $(cdbs_waf_configure_options)
	touch $@


common-build-arch common-build-indep:: common-build-impl
common-build-impl:: debian/stamp-waf-build
debian/stamp-waf-build:
	$(DEB_WAF_INVOKE) $(DEB_WAF_BUILD_TARGET) $(cdbs_waf_options)
	touch $@


clean:: cdbs-waf-clean
cdbs-waf-clean: cdbs-waf-sanity-check
	$(DEB_WAF_INVOKE) $(DEB_WAF_CLEAN_TARGET) $(cdbs_waf_options)
	rm -rf debian/stamp-waf-*


common-install-arch common-install-indep:: common-install-impl
common-install-impl::
	$(DEB_WAF_INVOKE) $(DEB_WAF_INSTALL_TARGET) --destdir=$(cdbs_curdestdir) $(cdbs_waf_options)


CDBS_BUILD_DEPENDS_class_waf ?= python, cdbs (>= 0.4.90)
CDBS_BUILD_DEPENDS += , $(CDBS_BUILD_DEPENDS_class_waf)

DEB_PHONY_RULES += cdbs-waf-clean

endif

