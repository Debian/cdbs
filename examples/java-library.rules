#!/usr/bin/make -f
# -*- mode: makefile; coding: utf-8 -*-
# Copyright Â© 2003 Stefan Gybas <sgybas@debian.org>

#
# Example file for Java library packages that use the Ant build system
#

include /usr/share/cdbs/1/rules/debhelper.mk
include /usr/share/cdbs/1/class/ant.mk

# The home directory of the Java Runtime Environment (JRE) or Java Development
# Kit (JDK). You can either set JAVA_HOME directly or set JAVA_HOME_DIRS to
# multilpe possbile home directories. The first existing directory from this
# list is used for JAVA_HOME. You can also override JAVACMD in case you don't
# want to use the default JAVA_HOME/bin/java.
JAVA_HOME := /usr/lib/kaffe

# Ant's home directory. Use /usr/share/ant1.5 for the libant1.5-java package
# in main. If you need optional Ant tasks, use /usr/share/ant and add
# $(ANT_HOME)/lib/ant-optional.jar to DEB_JARS below.
ANT_HOME := /usr/share/ant1.5

# Additional JARs to add to the class path, either full path or just the
# basename for JARs in /usr/share/java. The ".jar" suffix may also be ommitted.
# ant.jar and $(JAVA_HOME)/lib/tools.jar are automatically added if they
# exist.
DEB_JARS := xerces

# Build compiler
DEB_ANT_COMPILER := jikes

# Property file for Ant, defaults to debian/ant.properties if it exists.
# You may define additional properties that are referenced from build.xml so
# you don't have to modify upstream's build.xml. Please note that command-line
# arguments in ANT_ARGS (see below) override the settings in build.xml and
# the property file.
#DEB_ANT_PROPERTYFILE := build.properties

# Defaults to build.xml (Ant's default) in the $(DEB_BUILDDIR) directory
#DEB_ANT_BUILDFILE := build.xml

# Additional options to pass to the Java virtual machine
#ANT_OPTS := -verify *

# Additional command-line arguments for Ant
#ANT_ARGS := -verbose

# Targets to invoke for building, installing, testing and cleaning up.
# Building uses the default target from build.xml, installing and testing is
# only called if the corresponding variable is set. You can also specify
# multiple targets for each step.
DEB_ANT_BUILD_TARGET   := compile
#DEB_ANT_INSTALL_TARGET :=
#DEB_ANT_TEST_TARGET    :=
#DEB_ANT_CLEAN_TARGET   := clean

# This example assumes that Ant creates a JAR in dist which should be installed
# into /usr/share/java with the appropriate API version in the name. These
# steps can also be handled by debhelper (debian/*.install and debian/*.links),
# of course.

LIBRARY_PACKAGE := example
API_VERSION     := 1.0

install/lib$(LIBRARY_PACKAGE)-java::
	install -m 644 dist/$(LIBRARY_PACKAGE).jar debian/$(cdbs_curpkg)/usr/share/java/$(LIBRARY_PACKAGE)-$(API_VERSION).jar
	ln -s $(LIBRARY_PACKAGE)-$(API_VERSION).jar debian/$(cdbs_curpkg)/usr/share/java/$(LIBRARY_PACKAGE).jar

